## October 12, 2021

Two bets:
- Who holds the team with the snitch at the end of the regular season?
- Who holds the team with the most games won claiming/holding the snitch?

I've altered the second bet to make this basic analysis simpler.
The actual bet gives each team 1pt for each day they hold the snitch,
but I don't care to do that date math.


Sources:
- https://projects.fivethirtyeight.com/2022-nhl-predictions/games/
- https://github.com/fivethirtyeight/data/tree/master/nhl-forecasts
  - specifically the _latest.csv file
- https://www.nhl.com/news/nhl-announces-2021-22-regular-season-schedule/c-325741704
  - less helpful than I'd hoped


Naive approach:
Start with the Lightning's first game and build out every possible branch

Problem:
2^82 is a very big number

Wolfram Alpha says:

  4.835703278458516698824704 * 10^24
  4,835,703,278,458,516,698,824,704

This is much lower than estimated number of atoms in the Earth
(roughly 1.33 * 10^53)


I need to be smarter.


What are the goals of this analysis:
- Score each team by likelihood of holding snitch at end of season.
- Score each team by opportunities to claim the snitch.


I can think of two approaches:
a) Calculation: Which teams play Lightning most? Which teams play those teams most? Etc...
b) Simulation:  Give each team 50-50 odds to win. Simulate 10,000 seasons and count.


How confident am I in my ability to do a rigorous calculation?
Seems not-too-hard?


Matchup details from the NHL press release:

  Reminder: Scheduling Matrix
  Each Division Has Eight Teams

  Games Within Division
  5 teams x 2 home / 2 away (Subtotal 10 home / 10 away)
  1 team  x 2 home / 1 away (Subtotal 2 home / 1 away)
  1 team  x 1 home / 2 away (Subtotal 1 home / 2 away)

  Games Within Conference (Non-Division)
  4 teams x 2 home / 1 away (Subtotal 8 home / 4 away)
  4 teams x 1 home / 2 away (Subtotal 4 home / 8 away)

  Non-Conference Games
  16 teams x 1 home / 1 away (Subtotal 16 home / 16 away)

  Grand Total - 82 Games
  41 home / 41 away


I need to get this CSV from Five Thirty Eight
translated into JSON because NodeJS doesn't have
CSV parsing in the standard library.

Guess I need to write a short Python script.
Yeesh.


Before getting into that script, I should decide on
what I want the JSON to look like.

Team:
- slug
- location (Carolina, etc)
- name (Panthers, etc)

Game:
- date (YYYY-mm-dd)
- home team slug
- away team slug


### October 13, 2021

I'm more interested in writing the simulation
than in writing the calculation.


What does one season look like?
- per-team counts for "snitch games won"
- load snitch history into team scores
- track team that currently holds the snitch
- find next game for snitch team
- flip the coin
- assign snitch
- repeat


Must figure out basic date math for this.

I guess assume each game happens at 12:00:00
and add 86400000ms to move forward one day.


Back after dinner

I'm less excited about predictive analysis now

I'm more interested in telling the story of the
season, with light analysis.

Idea:
Tall page with 2 columns
- left column is a table
  - ledger of the season
  - 6 columns (1 for each owner)
  - ~82 rows (1 for each game played)
- right column
  - drawing space to display possibility tree of next 2 (3?) games


How to generate table?
Vanilla React with click events?

Why do I want click events?
Don't need them initially because the next snitch
game is always known, as are the next N possible games

Start showing:
- next game outcomes (2 branches)
- next next game outcomes (4 branches)

I think 3 levels (8 branches) is too complex
Maybe leave this as an experimental hack


So no click events
Just render the page with the information at hand


npm install --save-dev @babel/core @babel/plugin-transform-runtime @babel/preset-env @babel/preset-react  babel-loader copy-webpack-plugin html-loader  html-webpack-plugin webpack-dev-server


This install is slooooow
finished eventually

pausing for the night
will revisit later


### October 14, 2021

Hoping to get a basic React app ready to go
over lunch today

I've made a mess
I need to figure out where my root is and how
sub-projects will fit into it.

Probably put current nhl_2022 into a data directory
and build a menu page in golden_snitch root.

Clean out all draft work and replace with something in the root!


Back after dinner
Time for a new, comprehensive plan

How to structure the menu?
Array of per season/whatever dicts
in the main menu


Looking good!

Back to working on the lookahead code

Looking good
Getting 7 games as expected!

I think I need to modify the lookahead dictionary
to be keyed off date, then contain game slugs


Thinking through how to render cells from the lookahead dictionary.
HMMMMMMMMM
It's possible for a party to own multiple teams
that could win on a given date.
I guess commas for now.

Hmmmm
2 is too many lookahead generations
Setting countLookaheadGames = 1

Feeling good!


Making a commit


I think the next step is creating a CalendarCell component
- eventually render logo from slug
- click handler for adding a win to the speculative timeline
- personal styling based on props (e.g. speculative win, or lookahead cell)


Also need to do one of the following;
- backtrack logic to allow clicking on any lookahead cell
  and working backward to the most recent completed game
- update lookahead data structure to store the directed graph of wins


### October 17, 2021

Starting work on the CalendarCell component

Possible attributes:
- type of cell
  - pre-season
  - completed
  - speculative
  - lookahead
- team/winner
- onclick handler
- styling for button (pointer:cursor, etc)

How to handle multiple teams in a cell?

Probably need to put most of this in a
separate Team component

Cell
- gametype styles
  - pre-season
  - completed
  - speculative
  - lookahead

Button
- team icon
- onclick handler/enabled (no clicks for completed games)
- styling for button (pointer:cursor, etc)


Best way to handle click handler logic?
Whatever
Don't overthink it.
Just do something that works
Extra re-renders isn't terrible here (hopefully)


Thinking through the logic of adding a lookahead
winner to the speculative timeline

Wins in the speculative timeline are rendered
similarly to completed games, but get to be
a button that removes itself + all following games
from the speculative timeline.o

Adding a win to the speculative timeline also
updates the current holder in Calendar state.

What data should speculative timeline games have
- gameDate
- slugHolder

(exactly like completed games)


Working okay, but some dates are out of order
--> ADDING A SORT
--> COOL


Making a commit


Time to restrict button to only teams from the
first lookahead game.

Must tweak shape of lookahead records
to include generation
--> DONE


Making a commit


I guess it's finally time to figure out styles.

I'll try Tailwind CSS:
  https://tailwindcss.com/docs


Found this blog post:
  https://blog.logrocket.com/webpack-from-scratch-for-tailwind-css-with-react/


Hmmmm
this blog post is from 2018

Found this:
  https://dev.to/elfatouakikhalid/your-first-tailwindcss-setup-with-webpack-1gfm
Not loving it


Maybe I can adapt the official Tailwind instructions,
even though they use create-react-app:
  https://tailwindcss.com/docs/guides/create-react-app

Blech
This is complex


Re-reading the TailwindCSS docs to better
understand what it gives me.

Looks a little goofy
But what the hell
Let's try it out


Installing NPM packages:
- autoprefixer
- postcss-import
- tailwindcss


Executing the init:
  npx tailwindcss init


Hmmmm
Do I care ub having Tailwind JS in React?
Seems like no?


Still, I need to build CSS
Installing this NPM package:
- postcss-cli


Added this script commands to package.json:
- css:build
- css:watch


Making a commit


Time to add classes to my React!

Tailwind feels dumb and I dislike it,
but I don't *hate* it.


Got all 32 NHL team logos

Not to figure out how to use them as background-image

Reading this page
  https://medium.com/a-beginners-guide-for-webpack-2/copy-all-images-files-to-a-folder-using-copy-webpack-plugin-7c8cf2de7676


Installing these NPM packages:
- url-loader
- file-loader


Adding this to tests: { ... } in webpack.config.js

  {
    test: /\.(png|jp(e*)g|svg)$/,
    use: [{
      loader: 'url-loader',
      options: {
        name: 'images/[name].[ext]',
      },
    }],
  }


Webpack is building successfully
This is jamming the whole base64-encoded image
into the CSS
Dumb


Will go back to trying to get file references to work

Looks like file-loader is deprecated now
  https://github.com/webpack-contrib/file-loader#file-loader


Reading this page:
  https://webpack.js.org/guides/asset-modules/


Replacing this old config in webpack.config.js:

  {
    test: /\.(png|jp(e*)g|svg)$/i,
    use: [{
      loader: 'file-loader',
      options: {
        name: 'images/[name].[ext]',
      },
    }],
  }


With this:

  {
    test: /\.(png|jp(e*)g|svg)$/i,
    type: 'asset/resource'
  }


WORKS
GREAT

w-4 is a little small, but okay


Making a commit


Improving styling of logos and buttons.
Feeling decent about what I've got

Fighting with display: flex on <td> elements
They are stacking vertically
Haven't seen this before
No flex, then
just floats, I guess






